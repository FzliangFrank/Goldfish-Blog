[
  {
    "objectID": "01-12.html",
    "href": "01-12.html",
    "title": "Visualise Matrix Transformation as Paper Folding",
    "section": "",
    "text": "Code\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib\n%config InlineBackend.figure_format='retina'\n# to change default colormap\nplt.rcParams[\"image.cmap\"] = \"Set3\"\n# to change default color cycle\nmyC= plt.cm.tab20b.colors\nplt.rcParams['axes.prop_cycle'] = plt.cycler(color=myC[:1]+myC[2:])\nmatplotlib.rcParams['figure.figsize'] = (20, 10)\nplt.style.use('seaborn-v0_8-whitegrid')\n\nm1 = np.array([[1,2],\n            [3,4],\n            [1,1],\n            [5,4]])#two dimenstional tensor\n\nweight = np.array([0.5,0.5])#what tensor will try to guess\nnp.dot(m1,weight)#if this were a scala problem this the value will be used for relu activation\n\n\narray([1.5, 3.5, 1. , 4.5])\nWhat maybe powerful is matrix will changes shapes. Would it matter what input shape I choose?\nCode\nprint('weight2 is')\nweight2 = np.array([[0.5,0.1,0.3],\n                    [0.5,0.2,0.3]])#you can expand infinitly horisentally\n\nprint(weight2)\nprint('Using dot product we expand the width of the matrix to 3')\nprint(np.dot(m1,weight2))\n\nprint('Use another product to trave the dimension back ')\nweight3 = np.array([[0.1,0.2],\n                    [0.9,0.1],\n                    [0.2,0.5]])\nm3 = np.dot(np.dot(m1,weight2),weight3)\nprint(m3)\nprint(\"notice how the first matrix expand matrix dimention to 3 and the second to 2;\")\n\n\nweight2 is\n[[0.5 0.1 0.3]\n [0.5 0.2 0.3]]\nUsing dot product we expand the width of the matrix to 3\n[[1.5 0.5 0.9]\n [3.5 1.1 2.1]\n [1.  0.3 0.6]\n [4.5 1.3 2.7]]\nUse another product to trave the dimension back \n[[0.78 0.8 ]\n [1.76 1.86]\n [0.49 0.53]\n [2.16 2.38]]\nnotice how the first matrix expand matrix dimention to 3 and the second to 2;\nCode\nweight2 = np.array(\n    [[0.5,0.5,0.5],\n    [0.5,1,0.41]])\nweight3 = np.array(\n    [[1, 0.2],\n    [0.9,0.1],\n    [0.9,0.7]])\n# notice how the th\nweight = np.dot(weight2, weight3)\nprint(weight)\n\ndef my_transformation(m1, w):\n    m3=m1.dot(w)\n    return m3\n\ndef plot_transformation(m1, m3, ax=None):\n    if ax is None:\n        ax=plt.gca()\n    for i in range(m1.shape[0]):\n        x=[m1[i,0],m3[i,0]]\n        y=[m1[i,1],m3[i,1]]\n        ax.plot(x,y, 'k-',alpha=0.8,zorder=5)\n    \n    ax.scatter(m1[:,0],m1[:,1], zorder=6,alpha=1)\n    ax.scatter(m3[:,0],m3[:,1],zorder=7, alpha=0.7)\n\n\n[[1.4   0.5  ]\n [1.769 0.487]]\nCode\n# This perhaps is really usefull to test to see what you neuro network is doing:\nrotator = np.array([\n    [0,1],\n    [1,0]\n])\n\nfigure,ax=plt.subplots(figsize=(5,5))\n\nm1=np.random.random((50,2))\nm2=my_transformation(m1, rotator)\nplot_transformation(m1,m2,ax=ax)"
  },
  {
    "objectID": "01-12.html#create-a-contour-visualiualisation-of-tendency",
    "href": "01-12.html#create-a-contour-visualiualisation-of-tendency",
    "title": "Visualise Matrix Transformation as Paper Folding",
    "section": "1 Create a Contour visualiualisation of tendency",
    "text": "1 Create a Contour visualiualisation of tendency\nNext I want to visualise the tendency the matrix do for sampled at each pointsâ€¦ I found two visual idiom: meshgird and quiver.\n\n\nCode\n\nv1=np.arange(-2, 2, .5)\nv2=np.arange(-2, 2, .5)\nx,y = np.meshgrid(v1, v2)\n\n# to help understand what np.meshgird does. \n# It helps creates cross from two vector\nassert x.shape==y.shape\nassert len(v1)==x.shape[1]\nassert x.size == len(v1) * len(v2)\n\nplt.figure(figsize=(3,3))\nplt.plot(x,y,marker='.',linestyle='none',color='k')\n\nx,y = np.meshgrid(v1, v2)\nz=np.sqrt(x**2 + y**2)\nplt.contourf(x,y,z)\nplt.colorbar()\nplt.axis('scaled')\n\n# z = x*np.exp(-x**2 - y**2)\n# v, u = np.gradient(z, .2, .2)\n# fig, ax = plt.subplots()\n# q = ax.quiver(x,y,u,v)\n# plt.show()\n\n\n(-2.0, 1.5, -2.0, 1.5)\n\n\n\n\n\n\n\nCode\ncord=np.vstack((x.reshape(1,x.size),y.reshape(1,y.size))).T\nplt.figure(figsize=(3,3))\nplt.plot(cord[:,0],cord[:,1],marker='.',linestyle=\"none\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ML Index",
    "section": "",
    "text": "Ledgend:\n\nFirst Lab Explore linear matrix transformation effect for a two dimension array with two feature (just x and y)\nSecond Follow the Deep Learning Book Chapter 3 use example of IBM sentient analysis."
  }
]